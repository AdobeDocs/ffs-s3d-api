overlay: 1.0.0
info:
  title: Overlay for the Adobe Substance 3D API
  version: 1.0.0
extends: https://s3d.adobe.io/openapi.yaml
actions:
  # -------------------------
  # 'Remove' actions (Targeted Overlay)
  # -------------------------

  # Remove internal paths (without 'x-s3d-public' tag)
  # - target: $.paths.*[?(@['x-internal']==true)]
  - target: $.paths.*[?(@['x-s3d-public']!=true)]
    remove: true

  # Remove tags from paths
  - target: $.paths..tags.*
    remove: true

  # Remove contact
  - target: $.info.contact
    remove: true

  # Remove 'API Key' security scheme
  - target: $.security[?(@.apiKey)]
    remove: true
  - target: $.components.securitySchemes.apiKey
    remove: true

  # -------------------------
  # 'Update' actions (Structured Overlay, applied on Root of document)
  # -------------------------
  - target: $
    update:
      # INFO
      info:
        title: Adobe Substance 3D API - Firefly Services
        version: 1.0.0
        description: REST API for Adobe Substance 3D - Firefly Services.

      # PATHS
      paths:
        /v1/composites/compose:
          post:
            summary: Generate 3D Object Composite
            description: Generate a 3D Object Composite with the Substance 3D API.
            tags:
              - Composites

        /v1/scenes/convert:
          post:
            summary: Convert 3D Files
            description: Convert a 3D file into another 3D format with the Substance 3D API.
            tags:
              - Scenes

        /v1/scenes/render:
          post:
            summary: Render 3D Object
            description: Render a 3D Object with the Substance 3D API.
            tags:
              - Scenes

        /v1/scenes/render-basic:
          post:
            summary: Render 3D Object (basic version)
            description: Render a 3D Object (basic version) with the Substance 3D API.
            tags:
              - Scenes

        /v1/scenes/assemble:
          post:
            summary: Create 3D Scene
            description: Assemble a 3D Scene with the Substance 3D API.
            tags:
              - Scenes

        /v1/scenes/describe:
          post:
            summary: Describe 3D Scene
            description: Describe a 3D scene.
            tags:
              - Scenes

        /v1/spaces:
          post:
            summary: Create Space
            description: Create a Space from 3D files.
            tags:
              - Spaces
            requestBody:
              content:
                multipart/form-data:
                  schema:
                    properties:
                      filename:
                        description: Filename of the file being uploaded.
                      name:
                        description: General purpose name for multipart form value.

      # COMPONENTS
      components:
        schemas:
          # Main ComposeSceneRequest properties
          restv1.ComposeSceneRequest:
            properties:
              $schema:
                description: A URL to the JSON schema for this object.
              cameraName:
                description: Name of an existing camera in the source 3D scene. The camera has to be defined in the scene.
              contentClass:
                description: Class of content to generate.
              enableGroundPlane:
                description: Enable the auto-generated ground plane under the hero asset. This is useful if the 3D scene contains only a hero asset, without additional elements.
              heroAsset:
                description: Name of an existing 'hero asset' in the source 3D scene. The asset has to be defined in the scene.
              lightingSeeds:
                description: Optional seeds to be used to generate the lighting for the scene. The first seed will be used with the first seed of the background, the second one with the second seed of the background and so on. Background seeds must be defined and the number of lighting seeds should equal the number of background seeds. If not set, random seeds will be used. You will be able to retrieve the seeds used for the generation in the output details of the job.
              modelVersion:
                description: Model version to be used to generate the background image with Adobe Firefly.
              numVariations:
                description: The number of variations to generate. `numVariations` will default to the number of seeds, or to 1 if `seeds` is not specified.
              prompt:
                description: Prompt to be used to generate the background image with Adobe Firefly.
              sceneFile:
                description: The path of the scene file in `sources`. If value is null, the first found scene file will be used.
              seeds:
                description: Optional seed value to be used to generate the background image with Adobe Firefly. A seed ensures consistent background image generation. If `seed` is not set, a random seed will be used. Retrieve the seed used for the generation in the output details of the job. If specified with `numVariations`, the number of seeds must be the equal to `numVariations`.
              size:
                description: |-
                  The size of the image generations. The supported dimensions for image generations are: 
                    | Dimensions | Description | 
                    | -----------| ----- |
                    | { "width": 2048, "height": 2048} | Square (1:1) |
                    | { "width": 2304, "height": 1792 } | Landscape (4:3) |
                    | { "width": 1792, "height": 2304 } | Portrait (3:4) | 
                    | { "width": 2688, "height": 1536 } | Widescreen (16:9) |  
                    | { "width": 1344, "height": 768 } |(7:4) |  
                    |{ "width": 1152, "height": 896 } |(9:7) |  
                    |{ "width": 896, "height": 1152 } |(7:9) |  
                    | { "width": 1024, "height": 1024} | Square (1:1) |
              sources:
                description: List of sources to aggregate and run the job against.
              styleImage:
                description: Optional 'style image' to be used to generate the background. The style image has to be present in `sources`.

          # Nested OutputSize component (referenced by 'size' parameter)
          # types.OutputSize:
          #   properties:
          #     height:
          #       type: integer
          #       format: int64
          #       maximum: 2688
          #       minimum: 1
          #     width:
          #       type: integer
          #       format: int64
          #       maximum: 2688
          #       minimum: 1

          # Nested MountedSource component (referenced by 'sources' parameter)
          rest_base.MountedSource:
            properties:
              frame.io:
                description: Fetch content from a Frame.io folder. ⚠️ All sources are exclusive.
              mountPoint:
                description: Where to mount the content of the source in the virtual job working directory.
              space:
                description: Read content from an existing space (can be another job's output, or uploaded manually with the space API). ⚠️ All sources are exclusive.'
              url:
                description: Fetch content from a URL. ⚠️ All sources are exclusive.

          # Nested SourceFrameIO component (referenced by MountedSource.frame.io)
          # rest_base.SourceFrameIO:
          #   properties:
          #     accessToken:
          #       type: string
          #     folderId:
          #       type: string

          # Nested SourceSpace component (referenced by MountedSource.space)
          rest_base.SourceSpace:
            properties:
              id:
                description: A space ID.

          # Nested SourceURL component (referenced by MountedSource.url)
          rest_base.SourceURL:
            properties:
              filename:
                description: Filename override, if unset, will try to detect filename from content disposition header, then url itself.
              url:
                description: URL to fetch content from.

          # ========================================
          # COMPOSE SCENE ENDPOINTS - Response Objects
          # ========================================
          # Main ComposeSceneResponse
          restv1beta.ComposeSceneResponse:
            properties:
              $schema:
                description: A URL to the JSON schema for this object.
              bugReportUrl:
                description: URL to report a bug about this job.
              error:
                description: Potential error that happened during the job processing.
              id:
                description: Unique identifier of the job.
              result:
                description: Result when the job is successfully finished.
              status:
                description: Status of the job. Can be `not_started`, `running`, `succeeded`, or `failed`.
              url:
                description: URL to fetch/poll for job result in case the job is not finished yet.

          # ComposeSceneJobResult (nested in result)
          # restv1beta.ComposeSceneJobResult:
          #   properties:
          #     promptHasBlockedArtists:
          #       type: boolean
          #     promptHasDeniedWords:
          #       type: boolean

          # ComposeOutput (nested in outputs)
          # restv1beta.ComposeOutput:
          #   properties:
          #     image:
          #       $ref: "#/components/schemas/restv1beta.ComposeOutputImage"
          #     seed:
          #       type: integer
          #       format: int64

          # ComposeOutputImage (nested in image)
          # restv1beta.ComposeOutputImage:
          #   properties:
          #     url:
          #       type: string

          # ========================================
          # SPACES ENDPOINT - Response Objects
          # ========================================

          # Note: Multipart form data properties cannot be updated via overlay
          # as they use inline schemas in the paths section, not component schemas.

          # ========================================
          # createSpace_v1 - Create Space Response
          # ========================================
          # Space (nested in outputSpace)
          rest_base.Space:
            properties:
              $schema:
                description: A URL to the JSON schema for this object.
              archiveUrl:
                description: URL to fetch the whole space as an archive (usually a ZIP file).
              files:
                description: List of all files contained in Space, ordered by name.
                # items:
                #   $ref: "#/components/schemas/rest_base.SpaceFile"
              id:
                description: Unique identifier of this Space.
              url:
                description: URL to the full description of this Space.

          # SpaceFile (nested in files)
          # rest_base.SpaceFile:
          #   properties:
          #     name:
          #       type: string
          #     size:
          #       type: integer
          #       format: int64
          #       minimum: 0
          #     url:
          #       type: string

          # ========================================
          # Error response objects
          # ========================================
          # FFAPIError (used in all error responses)
          ffapierrors.FFAPIError:
            properties:
              $schema:
                description: A URL to the JSON schema for this object.
              error_code:
                description: Associated error code.
              error_details:
                description: Optional list of individual error details.
              message:
                description: Error message.

          # FFAPIErrorDetail (nested in error_details)
          ffapierrors.FFAPIErrorDetail:
            properties:
              error_code:
                description: Error code.
              error_context:
                description: Additional context for the error.
              loc:
                description: Where the error occurred, indicated in dot notation (e.g., body.items[3].tags or path.thing-id).
              msg:
                description: Error message text.

          # ========================================
          # SCENES ENDPOINTS - Request Objects
          # ========================================

          # ========================================
          # v1/scenes/assemble - Create 3D Scene
          # ========================================
          # CreateSceneRequest properties
          restv1beta.CreateSceneRequest:
            properties:
              $schema:
                description: A URL to the JSON schema for this object.
              encoding:
                description: Encoding output format.
              fileBaseName:
                description: Output filename.
              # scene:
              #   $ref: "#/components/schemas/types.SceneDescription"
              sources:
                description: List of sources to aggregate and run the job against.

          # ========================================
          # v1/scenes/convert - Convert 3D Files
          # ========================================
          # ModelConvertRequest properties
          restv1beta.ModelConvertRequest:
            properties:
              $schema:
                description: A URL to the JSON schema for this object.
              format:
                description: Output format.
              modelEntrypoint:
                description: Conversion usually takes the first file that's considered a valid 3D model. Define this entry point to disambiguate when there are multiple options.
              sources:
                description: List of sources to aggregate and run the job against.

          # ========================================
          # v1/scenes/describe - Describe 3D Scene
          # ========================================
          # SceneDescRequest properties
          restv1beta.SceneDescRequest:
            properties:
              $schema:
                description: A URL to the JSON schema for this object.
              sceneFile:
                description: Path to the scene file in `sources`. If the value is `null`, the first found scene file will be used.
              sources:
                description: List of sources to aggregate and run the job against.

          # ========================================
          # v1/scenes/render - Render 3D Object
          # ========================================
          # RenderSceneRequest properties
          restv1beta.RenderSceneRequest:
            properties:
              $schema:
                description: A URL to the JSON schema for this object.
              autoFraming:
                description: Auto-framing related options.
              background:
                description: Background related options.
              cameraName:
                description: If set, this camera is used to perform the render. The camera has to be defined in the scene.
              extraOutputs:
                description: Request additional outputs from the renderer.
              groundPlane:
                description: Options related to the ground plane.
              scene:
                description: Define rendering scene primitives.
              size:
                description: Render size related options.
              sources:
                description: List of sources to aggregate and run the job against.

          # ========================================
          # v1/scenes/render-basic - Render 3D Object (basic version)
          # ========================================
          # RenderModelRequest properties
          restv1beta.RenderModelRequest:
            properties:
              $schema:
                description: A URL to the JSON schema for this object.
              autoFraming:
                description: Options related to auto-framing.
              background:
                description: Options related to the background.
              cameraName:
                description: If set, this camera is used to perform the render. The camera has to be defined in the scene.
              extraOutputs:
                description: Request additional outputs from the renderer.
              groundPlane:
                description: Options related to the ground plane.
              scene:
                description: Define rendering scene primitives.
              size:
                description: Options related to the render size.
              sources:
                description: List of sources to aggregate and run the job against.

          # ========================================
          # SCENES ENDPOINTS - Response Objects
          # ========================================

          # ========================================
          # v1/scenes/assemble - Create 3D Scene Response
          # ========================================
          # CreateSceneResponse properties
          restv1beta.CreateSceneResponse:
            properties:
              $schema:
                description: A URL to the JSON schema for this object.
              bugReportUrl:
                description: URL to report a bug about this job.
              error:
                description: Potential error that happened during the job processing.
              id:
                description: Unique identifier of the job.
              result:
                description: Result when the job is successfully finished.
              status:
                description: Status of the job. Can be `not_started`, `running`, `succeeded`, or `failed`.
              url:
                description: URL to fetch/poll for the job result, in case the job is not finished yet.

          # CreateSceneJobResult properties
          restv1beta.CreateSceneJobResult:
            properties:
              # outputSpace:
              #   $ref: "#/components/schemas/rest_base.Space"
              sceneUrl:
                description: URL for the created scene.

          # ========================================
          # v1/scenes/convert - Convert 3D Files Response
          # ========================================
          # ModelConvertResponse properties
          restv1beta.ModelConvertResponse:
            properties:
              $schema:
                description: A URL to the JSON schema for this object.
              bugReportUrl:
                description: URL to report a bug about this job.
              error:
                description: Potential error that happened during the job processing.
              id:
                description: Unique identifier of the job.
              result:
                description: Result when the job is successfully finished.
              status:
                description: Status of the job. Can be `not_started`, `running`, `succeeded`, or `failed`.
              url:
                description: URL to fetch/poll for the job result, in case the job is not finished yet.

          # ModelConvertJobResult properties
          # restv1beta.ModelConvertJobResult:
          #   properties:
          #     outputSpace:
          #       $ref: "#/components/schemas/rest_baseSpace"

          # ========================================
          # v1/scenes/describe - Describe 3D Scene Response
          # ========================================
          # SceneDescResponse properties
          restv1beta.SceneDescResponse:
            properties:
              $schema:
                description: A URL to the JSON schema for this object.
              bugReportUrl:
                description: URL to report a bug about this job.
              error:
                description: Potential error that happened during the job processing.
              id:
                description: Unique identifier of the job.
              result:
                description: Result when the job is successfully finished.
              status:
                description: Status of the job. Can be `not_started`, `running`, `succeeded`, or `failed`.
                # enum:
                #   - not_started
                #   - running
                #   - succeeded
                #   - failed
              url:
                description: URL to fetch/poll for the job result, in case the job is not finished yet.

          # SceneDescJobResult properties
          # restv1beta.SceneDescJobResult:
          #   properties:
          #     stats:
          #       $ref: "#/components/schemas/SceneStatsInfo"

          # ========================================
          # v1/scenes/render - Render 3D Object Response
          # ========================================
          # RenderSceneResponse properties
          restv1beta.RenderSceneResponse:
            properties:
              $schema:
                description: A URL to the JSON schema for this object.
              bugReportUrl:
                description: URL to report a bug about this job.
              error:
                description: Potential error that happened during the job processing.
              id:
                description: Unique identifier of the job.
              result:
                description: Result when the job is successfully finished.
              status:
                description: Status of the job. Can be `not_started`, `running`, `succeeded`, or `failed`.
              url:
                description: URL to fetch/poll for the job result, in case the job is not finished yet.

          # RenderSceneJobResult properties
          restv1beta.RenderSceneJobResult:
            properties:
              # outputSpace:
              #   $ref: "#/components/schemas/Space"
              renderUrl:
                description: URL to the rendered scene.

          # ========================================
          # v1/scenes/render-basic - Render 3D Object (basic version) Response
          # ========================================
          # RenderModelResponse properties
          restv1beta.RenderModelResponse:
            properties:
              $schema:
                description: A URL to the JSON schema for this object.
              bugReportUrl:
                description: URL to report a bug about this job.
              error:
                description: Potential error that happened during the job processing.
              id:
                description: Unique identifier of the job.
              result:
                description: Result when the job is successfully finished.
              status:
                description: Status of the job. Can be `not_started`, `running`, `succeeded`, or `failed`.
              url:
                description: URL to fetch/poll for the job result, in case the job is not finished yet.

          # ========================================
          # SCENES ENDPOINTS - Nested Components
          # ========================================
          # SceneDescription properties
          types.SceneDescription:
            properties:
              baseFile:
                description: Define a scene from a file. If value is `null`, an empty scene will be created.
              camera:
                description: Define a new camera for the scene.
              environment:
                description: Define the environment for the scene. Override the previous existing environment.
              metersPerUnit:
                description: Length of a scene unit, in meters. Defaults to `baseFile` meters per unit if any, or 0.01 (centimeters) otherwise.
              models:
                description: Define additional models for the scene.

          # SimpleSceneDescription properties
          types.SimpleSceneDescription:
            properties:
              camera:
                description: Define a new camera for the scene.
              environment:
                description: Define the environment for the scene. Override the previous existing environment.
              formatOptions:
                description: Define options specific for the model file format.
              materialOverrides:
                description: Define material overrides.
              metersPerUnit:
                description: Length of a scene unit, in meters. Defaults to 0.01 (centimeters).
              modelFile:
                description: Path to the model file in `sources`. If the value is `null`, the first found model file will be used.
              modelTransform:
                description: Transform applied on the model.

          # SceneModels properties
          types.SceneModels:
            properties:
              imports:
                description: List of model import definitions.
              modelsRootNodeTransform:
                description: Global transformation applied on the models root node defined in the scene. Overrides the previous value, if it exists.

          # SceneModel properties
          types.SceneModel:
            properties:
              anchorName:
                description: Node name in scene graph which used as parent for the model. If anchor is not found, a node with the anchor name will be generated under models root node. And If value is `null`, a node will be generated under models root node.
              file:
                description: Path to the model file in `sources`. If the value is `null`, the first found model file will be used.
              formatOptions:
                description: Define options specific for the model file format.
              materialOverrides:
                description: Define material overrides.
              transform:
                description: Transform applied on the anchor node. Overrides the previous value, if it exists.

          # SceneCamera properties
          types.SceneCamera:
            properties:
              focal:
                description: Camera focal length, in mm.
              sensorWidth:
                description: Camera sensor width, in mm.
              transform:
                description: Controls the position and angle of the camera.

          # SceneEnvironment properties
          types.SceneEnvironment:
            properties:
              exposure:
                description: Exposure, in EV (0=neutral).
              file:
                description: Path to the environment file in `sources`. If the value is `null`, the first found environment file will be used.
              preserveLights:
                description: A scene may contain 3D lights, like area lights or spot lights. By default, all those lights are removed when a new environment is set. Set this option to `true` to preserve the scene 3D lights.
              rotation:
                description: Controls the orientation of the environment map.

          # SceneBaseFile properties
          types.SceneBaseFile:
            properties:
              file:
                description: Path to the scene file in `sources`.
              modelsRootNodeName:
                description: Define root node for models in scene graph. If not found, the node which are parent of all models in the scene will be used. If this node doesn't exists, a new node will be created under global root.

          # AutoFramingOptions properties
          types.AutoFramingOptions:
            properties:
              zoomFactor:
                description: A value of 1 indicates tight framing. Less than 1 is a zoom-out. Greater than 1 is a zoom-in.

          # BackgroundOptions properties
          types.BackgroundOptions:
            properties:
              backgroundColor:
                description: RGBA background color. Has an effect only if `showEnvironment` is `false`. Each component has to be in the [0,1] range.
              backgroundImage:
                description: Path to a background image. If set, will be used as the background.
              showEnvironment:
                description: Show the environment map as the background.

          # GroundPlaneOptions properties
          types.GroundPlaneOptions:
            properties:
              autoGroundScene:
                description: Automatically position the scene on the ground plane. Moves the scene along the vertical axis.
              enable:
                description: Enable/disable the ground plane.
              reflections:
                description: Enable/disable reflections onto the ground plane.
              reflectionsOpacity:
                description: Controls the opacity of the reflections. Useful for compositing purposes.
              reflectionsRoughness:
                description: Controls the roughness of the reflections. Useful for compositing purposes.
              shadows:
                description: Controls whether the ground plane catches shadows or not.
              shadowsOpacity:
                description: Controls the opacity of catched shadows. Only has effect if shadows are enabled.

          # SizeOptions properties
          types.SizeOptions:
            properties:
              height:
                description: Render height.
              width:
                description: Render width.

          # SceneStatsInfo properties
          # types.SceneStatsInfo:
          #   properties:

          # SceneStatsNode properties
          # types.SceneStatsNode:
          #   properties:
          #     assignedMaterialName:
          #       type: string
          #       # items:
          #       #   $ref: "#/components/schemas/types.SceneStatsNode"
          #     name:
          #       type: string
          #     type:
          #       type: string
          #       # items:
          #       #   $ref: "#/components/schemas/types.SceneStatsNodeVariant"
          #     # worldSpaceBoundingBox:
          #     #   $ref: "#/components/schemas/types.SceneStatsBoundingBox"

          # SceneStatsNodeVariant properties
          # types.SceneStatsNodeVariant:
          #   properties:
          #     currentValue:
          #       type: string
          #     name:
          #       type: string

          # ========================================
          # ADDITIONAL NESTED COMPONENTS
          # ========================================
          
          # AzimuthAltitude properties
          types.AzimuthAltitude:
            properties:
              altitude:
                description: Altitude, in degrees, from -90 to 90 degrees.
              azimuth:
                description: Rotation around the vertical axis, in degrees.
              lookAt:
                description: Look at point coordinates.
              radius:
                description: Distance to the lookAt point.

          # ExportMasksOptions properties
          types.ExportMasksOptions:
            properties:
              selection:
                description: The list of masks to be exported, accepts glob expressions. If empty, all masks will be exported.

          # IdsMapData properties
          types.IdsMapData:
            properties:
              fileName:
                description: Ids map file name.
              ids:
                description: List of name to color bindings.

          # MaskNameToFileBinding properties
          types.MaskNameToFileBinding:
            properties:
              fileName:
                description: Corresponding file name.
              name:
                description: Name in 3D scene.

          # MaterialAssign properties
          types.MaterialAssign:
            properties:
              assignByDefault:
                description: Set to true to assign this material by default to all geometric primitives.
              excludeFromDefault:
                description: List of nodes to exclude from default assignment.
              material:
                description: The material definition.
              materialName:
                description: Desired material name, it will be sanitized to make a valid USD prim name.

          # NameToColorBinding properties
          types.NameToColorBinding:
            properties:
              color:
                description: Corresponding color in the ID map.
              name:
                description: Name in 3D scene.

          # RenderExtraOutputs properties
          types.RenderExtraOutputs:
            properties:
              exportMaterialIds:
                description: Export an image with one color per material.
              exportMaterialMasks:
                description: Export one mask per material.
              exportObjectIds:
                description: Export an image with one color per object.
              exportObjectMasks:
                description: Export one mask per object.
