overlay: 1.0.0
info:
  title: Overlay for the Adobe Substance 3D API
  version: 1.0.0
extends: https://s3d.adobe.io/openapi.yaml
actions:
  # -------------------------
  # 'Remove' actions (Targeted Overlay)
  # -------------------------

  # Remove internal paths (`x-internal` tag)
  # Can also be done with Redocly config (see https://redocly.com/docs/cli/guides/hide-apis)?
  - target: $.paths.*[?(@['x-internal']==true)]^
    remove: true

  # Remove internal 'v1beta' paths
  - target: $.paths[?(@path.includes('/v1beta/'))]
    remove: true

  # Remove tags from paths
  - target: $.paths..tags.*
    remove: true

  # Remove contact
  - target: $.info.contact
    remove: true

  # Remove 'API Key' security scheme
  - target: $.security[?(@.apiKey)]
    remove: true
  - target: $.components.securitySchemes.apiKey
    remove: true

  # -------------------------
  # 'Update' actions (Structured Overlay, applied on Root of document)
  # -------------------------
  - target: $
    update:
      # INFO
      info:
        title: Adobe Substance 3D API - Firefly Services
        version: 1.0.0
        description: REST API for Adobe Substance 3D - Firefly Services

      # PATHS
      paths:
        /v1/composites/compose:
          post:
            summary: Generate 3D Object Composite
            description: Generate a 3D Object Composite with the Substance 3D API.
            tags:
              - Composites

        /v1/scenes/convert:
          post:
            summary: Convert 3D Files
            description: Convert a 3D file into another 3D format with the Substance 3D API.
            tags:
              - Scenes

        /v1/scenes/render:
          post:
            summary: Render 3D Object
            description: Render a 3D Object with the Substance 3D API.
            tags:
              - Scenes

        /v1/scenes/render-basic:
          post:
            summary: Render 3D Object (basic version)
            description: Render a 3D Object (basic version) with the Substance 3D API.
            tags:
              - Scenes

        /v1/scenes/assemble:
          post:
            summary: Create 3D Scene
            description: Assemble a 3D Scene with the Substance 3D API.
            tags:
              - Scenes

        /v1/scenes/describe:
          post:
            summary: Describe 3D Scene
            description: Describe a 3D scene.
            tags:
              - Scenes

        /v1/spaces:
          post:
            summary: Create Space
            description: Create a Space from 3D files.
            tags:
              - Spaces

      # COMPONENTS EXAMPLE
      # components:
      #   schemas:
      #     AzimuthAltitude:
      #       type: object
      #       properties:
      #         radius:
      #           description: Distance to the 'lookAt' point

  # Add these to the overlay file under the 'Update' actions section

  # Main ComposeSceneRequest properties
  - target: $.components.schemas.ComposeSceneRequest.properties
    update:
      $schema:
        description: A URL to the JSON schema for this object.
      cameraName:
        description: Name of an existing camera in the source 3D scene. The camera has to be defined in the scene.
      contentClass:
        description: Class of content to generate.
        default: photo
      enableGroundPlane:
        description: Enable the auto-generated ground plane under the hero asset. This is useful if the 3D scene contains only a hero asset, without additional elements.
        default: false
      heroAsset:
        description: Name of an existing 'hero asset' in the source 3D scene. The asset has to be defined in the scene.
      modelVersion:
        description: Model version to be used to generate the background image with Adobe Firefly.
        default: image3_fast
      numVariations:
        description: The number of variations to generate. `numVariations` will default to the number of seeds, or to 1 if `seeds` is not specified.
      prompt:
        description: Prompt to be used to generate the background image with Adobe Firefly.
      sceneFile:
        description: The path of the scene file in `sources`. If value is null, the first found scene file will be used.
      seeds:
        description: Optional seed value to be used to generate the background image with Adobe Firefly. A seed ensures consistent background image generation. If `seed` is not set, a random seed will be used. Retrieve the seed used for the generation in the output details of the job. If specified with `numVariations`, the number of seeds must be the equal to `numVariations`.
      size:
        description: |-
          The size of the image generations. The supported dimensions for image generations are: 
            | Dimensions | Description | 
            | -----------| ----- |
            | { "width": 2048, "height": 2048} | Square (1:1) |
            | { "width": 2304, "height": 1792 } | Landscape (4:3) |
            | { "width": 1792, "height": 2304 } | Portrait (3:4) | 
            | { "width": 2688, "height": 1536 } | Widescreen (16:9) |  
            | { "width": 1344, "height": 768 } |(7:4) |  
            |{ "width": 1152, "height": 896 } |(9:7) |  
            |{ "width": 896, "height": 1152 } |(7:9) |  
            | { "width": 1024, "height": 1024} | Square (1:1) |
      sources:
        description: List of sources to aggregate and run the job against.
      styleImage:
        description: Optional 'style image' to be used to generate the background. The style image has to be present in `sources`.

        # Nested OutputSize component (referenced by 'size' parameter)
  - target: $.components.schemas.OutputSize.properties
    update:
      height:
        type: integer
        format: int64
        default: 1536
        maximum: 2688
        minimum: 1
      width:
        type: integer
        format: int64
        default: 2688
        maximum: 2688
        minimum: 1

# Nested MountedSource component (referenced by 'sources' parameter)
  - target: $.components.schemas.MountedSource.properties
    update:
      frame.io:
        description: Fetch content from a Frame.io folder. ⚠️ All sources are exclusive.
      mountPoint:
        description: Where to mount the content of the source in the virtual job working directory.
      space:
        description: Read content from an existing space (can be another job's output, or uploaded manually with the space API). ⚠️ All sources are exclusive.'
      url:
        description: Fetch content from a URL. ⚠️ All sources are exclusive.

# Nested SourceFrameIO component (referenced by MountedSource.frame.io)
  - target: $.components.schemas.SourceFrameIO.properties
    update:
      accessToken:
        type: string
      folderId:
        type: string

  # Nested SourceSpace component (referenced by MountedSource.space)
  - target: $.components.schemas.SourceSpace.properties
    update:
      id:
        description: A space ID.

  # Nested SourceURL component (referenced by MountedSource.url)
  - target: $.components.schemas.SourceURL.properties
    update:
      url:
        type: string

  # ========================================
  # COMPOSE SCENE ENDPOINTS - Response Objects
  # ========================================

  # Main ComposeSceneResponse
  - target: $.components.schemas.ComposeSceneResponse.properties
    update:
      $schema:
        description: A URL to the JSON schema for this object.
      bugReportUrl:
        description: URL to report a bug about this job.
      error:
        description: Potential error that happened during the job processing.
      id:
        description: Unique identifier of the job.
      result:
        description: Result when the job is successfully finished.
      status:
        description: Status of the job. Can be `not_started`, `running`, `succeeded`, or `failed`.
      url:
        description: URL to fetch/poll for job result in case the job is not finished yet.

  # ComposeSceneJobResult (nested in result)
  - target: $.components.schemas.ComposeSceneJobResult.properties
    update:
      promptHasBlockedArtists:
        type: boolean
      promptHasDeniedWords:
        type: boolean

  # ComposeOutput (nested in outputs)
  - target: $.components.schemas.ComposeOutput.properties
    update:
      image:
        $ref: '#/components/schemas/ComposeOutputImage'
      seed:
        type: integer
        format: int64

  # ComposeOutputImage (nested in image)
  - target: $.components.schemas.ComposeOutputImage.properties
    update:
      url:
        type: string

  # Space (nested in outputSpace)
  - target: $.components.schemas.Space.properties
    update:
      $schema:
        description: A URL to the JSON schema for this object.
      archiveUrl:
        description: URL to fetch the whole space as an archive (usually a ZIP file).
      files:
        description: List of all files contained in Space, ordered by name.
        items:
          $ref: '#/components/schemas/SpaceFile'
      id:
        description: Unique identifier of this Space.
      url:
        description: URL to the full description of this Space.

  # SpaceFile (nested in files)
  - target: $.components.schemas.SpaceFile.properties
    update:
      name:
        type: string
      size:
        type: integer
        format: int64
        minimum: 0
      url:
        type: string

  # Error response objects

  # FFAPIError (used in all error responses)
  - target: $.components.schemas.FFAPIError.properties
    update:
      $schema:
        description: A URL to the JSON schema for this object.
      error_code:
        description: Associated error code.
      error_details:
        description: Optional list of individual error details.
        type: array
        items:
          type: object
      message:
        description: Error message.

  # FFAPIErrorDetail (nested in error_details)
  - target: $.components.schemas.FFAPIErrorDetail.properties
    update:
      error_code:
        description: Error code.
      error_context:
        description: Additional context for the error.
      loc:
        description: Where the error occurred, indicated in dot notation (e.g., body.items[3].tags or path.thing-id).
      msg:
        description: Error message text.

# ========================================
# SCENES ENDPOINTS - Request Objects
# ========================================

# ========================================
# assembleScene_v1 - Create 3D Scene
# ========================================

# CreateSceneRequest properties
  - target: $.components.schemas.CreateSceneRequest.properties
    update:
      $schema:
        description: A URL to the JSON schema for this object.
      encoding:
        description: Encoding output format.
      fileBaseName:
        description: Output filename.
      scene:
        $ref: '#/components/schemas/SceneDescription'
      sources:
        description: List of sources to aggregate and run the job against.

  # ========================================
  # convertScene_v1 - Convert 3D Files
  # ========================================

  # ModelConvertRequest properties
  - target: $.components.schemas.ModelConvertRequest.properties
    update:
      $schema:
        description: A URL to the JSON schema for this object.
      format:
        description: Output format.
      modelEntrypoint:
        description: Conversion usually takes the first file that's considered a valid 3D model. Define this entry point to disambiguate when there are multiple options.
      sources:
        description: List of sources to aggregate and run the job against.

  # ========================================
  # describeScene_v1 - Describe 3D Scene
  # ========================================

  # SceneDescRequest properties
  - target: $.components.schemas.SceneDescRequest.properties
    update:
      $schema:
        description: A URL to the JSON schema for this object.
      sceneFile:
        description: Path to the scene file in `sources`. If the value is `null`, the first found scene file will be used.
      sources:
        description: List of sources to aggregate and run the job against.

  # ========================================
  # renderScene_v1 - Render 3D Object
  # ========================================

  # RenderSceneRequest properties
  - target: $.components.schemas.RenderSceneRequest.properties
    update:
      $schema:
        description: A URL to the JSON schema for this object.
      autoFraming:
        description: Auto-framing related options.
      background:
        description: Background related options.
      cameraName:
        description: If set, this camera is used to perform the render. The camera has to be defined in the scene.
      groundPlane:
        description: Options related to the ground plane.
      scene:
        description: Define rendering scene primitives.
      size:
        description: Render size related options.
      sources:
        description: List of sources to aggregate and run the job against.

  # ========================================
  # renderSceneBasic_v1 - Render 3D Object (basic version)
  # ========================================

  # RenderModelRequest properties
  - target: $.components.schemas.RenderModelRequest.properties
    update:
      $schema:
        description: A URL to the JSON schema for this object.
      autoFraming:
        description: Options related to auto-framing.
      background:
        description: Options related to the background.
      cameraName:
        description: If set, this camera is used to perform the render. The camera has to be defined in the scene.
      groundPlane:
        description: Options related to the ground plane.
      scene:
        description: Define rendering scene primitives.
      size:
        description: Options related to the render size.
      sources:
        description: List of sources to aggregate and run the job against.

  # ========================================
  # SCENES ENDPOINTS - Response Objects
  # ========================================

  # ========================================
  # assembleScene_v1 - Create 3D Scene Response
  # ========================================

  # CreateSceneResponse properties
  - target: $.components.schemas.CreateSceneResponse.properties
    update:
      $schema:
        description: A URL to the JSON schema for this object.
      bugReportUrl:
        description: URL to report a bug about this job.
      error:
        description: Potential error that happened during the job processing.
      id:
        description: Unique identifier of the job.
      result:
        description: Result when the job is successfully finished.
      status:
        description: Status of the job. Can be `not_started`, `running`, `succeeded`, or `failed`.
      url:
        description: URL to fetch/poll for the job result, in case the job is not finished yet.

  # CreateSceneJobResult properties
  - target: $.components.schemas.CreateSceneJobResult.properties
    update:
      outputSpace:
        $ref: '#/components/schemas/Space'
      sceneUrl:
        description: URL for the created scene.

  # ========================================
  # convertScene_v1 - Convert 3D Files Response
  # ========================================

  # ModelConvertResponse properties
  - target: $.components.schemas.ModelConvertResponse.properties
    update:
      $schema:
        description: A URL to the JSON schema for this object.
      bugReportUrl:
        description: URL to report a bug about this job.
      error:
        description: Potential error that happened during the job processing.
      id:
        description: Unique identifier of the job.
      result:
        description: Result when the job is successfully finished.
      status:
        description: Status of the job. Can be `not_started`, `running`, `succeeded`, or `failed`.
      url:
        description: URL to fetch/poll for the job result, in case the job is not finished yet.

  # ModelConvertJobResult properties
  - target: $.components.schemas.ModelConvertJobResult.properties
    update:
      outputSpace:
        $ref: '#/components/schemas/Space'

  # ========================================
  # describeScene_v1 - Describe 3D Scene Response
  # ========================================

  # SceneDescResponse properties
  - target: $.components.schemas.SceneDescResponse.properties
    update:
      $schema:
        description: A URL to the JSON schema for this object.
      bugReportUrl:
        description: URL to report a bug about this job.
      error:
        description: Potential error that happened during the job processing.
      id:
        description: Unique identifier of the job.
      result:
        description: Result when the job is successfully finished.
      status:
        description: Status of the job. Can be `not_started`, `running`, `succeeded`, or `failed`.
      url:
        description: URL to fetch/poll for the job result, in case the job is not finished yet.

  # SceneDescJobResult properties
  - target: $.components.schemas.SceneDescJobResult.properties
    update:
      stats:
        $ref: '#/components/schemas/SceneStatsInfo'

  # ========================================
  # renderScene_v1 - Render 3D Object Response
  # ========================================

  # RenderSceneResponse properties
  - target: $.components.schemas.RenderSceneResponse.properties
    update:
      $schema:
        description: A URL to the JSON schema for this object.
      bugReportUrl:
        description: URL to report a bug about this job.
      error:
        description: Potential error that happened during the job processing.
      id:
        description: Unique identifier of the job.
      result:
        description: Result when the job is successfully finished.
      status:
        description: Status of the job. Can be `not_started`, `running`, `succeeded`, or `failed`.
      url:
        description: URL to fetch/poll for the job result, in case the job is not finished yet.

  # RenderSceneJobResult properties
  - target: $.components.schemas.RenderSceneJobResult.properties
    update:
      outputSpace:
        $ref: '#/components/schemas/Space'
      renderUrl:
        description: URL to the rendered scene.

  # ========================================
  # renderSceneBasic_v1 - Render 3D Object (basic version) Response
  # ========================================

  # RenderModelResponse properties
  - target: $.components.schemas.RenderModelResponse.properties
    update:
      $schema:
        description: A URL to the JSON schema for this object.
      bugReportUrl:
        description: URL to report a bug about this job.
      error:
        description: Potential error that happened during the job processing.
      id:
        description: Unique identifier of the job.
      result:
        description: Result when the job is successfully finished.
      status:
        description: Status of the job. Can be `not_started`, `running`, `succeeded`, or `failed`.
      url:
        description: URL to fetch/poll for the job result, in case the job is not finished yet.

  # ========================================
  # SCENES ENDPOINTS - Nested Components
  # ========================================

  # SceneDescription properties
  - target: $.components.schemas.SceneDescription.properties
    update:
      baseFile:
        description: Define a scene from a file. If value is `null`, an empty scene will be created.
      camera:
        description: Define a new camera for the scene.
      environment:
        description: Define the environment for the scene. Override the previous existing environment.
      metersPerUnit:
        description: Length of a scene unit, in meters. Defaults to `baseFile` meters per unit if any, or 0.01 (centimeters) otherwise.
      models:
        description: Define additional models for the scene.

  # SimpleSceneDescription properties
  - target: $.components.schemas.SimpleSceneDescription.properties
    update:
      camera:
        description: Define a new camera for the scene.
      environment:
        description: Define the environment for the scene. Override the previous existing environment.
      formatOptions:
        description: Define options specific for the model file format.
      materialOverrides:
        description: Define material overrides.
      metersPerUnit:
        description: Length of a scene unit, in meters. Defaults to 0.01 (centimeters).
      modelFile:
        description: Path to the model file in `sources`. If the value is `null`, the first found model file will be used.
      modelTransform:
        description: Transform applied on the model.

  # SceneModels properties
  - target: $.components.schemas.SceneModels.properties
    update:
      imports:
        description: List of model import definitions.
      modelsRootNodeTransform:
        description: Global transformation applied on the models root node defined in the scene. Overrides the previous value, if it exists.

  # SceneModel properties
  - target: $.components.schemas.SceneModel.properties
    update:
      anchorName:
        description: Node name in scene graph which used as parent for the model. If anchor is not found, a node with the anchor name will be generated under models root node. And If value is `null`, a node will be generated under models root node.
      file:
        description: Path to the model file in `sources`. If the value is `null`, the first found model file will be used.
      formatOptions:
        description: Define options specific for the model file format.
      materialOverrides:
        description: Define material overrides.
      transform:
        description: Transform applied on the anchor node. Overrides the previous value, if it exists.

  # SceneCamera properties
  - target: $.components.schemas.SceneCamera.properties
    update:
      focal:
        description: Camera focal length, in mm.
      sensorWidth:
        description: Camera sensor width, in mm.
      transform:
        description: Controls the position and angle of the camera.

  # SceneEnvironment properties
  - target: $.components.schemas.SceneEnvironment.properties
    update:
      exposure:
        description: Exposure, in EV (0=neutral).
      file:
        description: Path to the environment file in `sources`. If the value is `null`, the first found environment file will be used.
      preserveLights:
        description: A scene may contain 3D lights, like area lights or spot lights. By default, all those lights are removed when a new environment is set. Set this option to `true` to preserve the scene 3D lights.
      rotation:
        description: Controls the orientation of the environment map.

  # SceneBaseFile properties
  - target: $.components.schemas.SceneBaseFile.properties
    update:
      file:
        description: Path to the scene file in `sources`.
      modelsRootNodeName:
        description: Define root node for models in scene graph. If not found, the node which are parent of all models in the scene will be used. If this node doesn't exists, a new node will be created under global root.

  # AutoFramingOptions properties
  - target: $.components.schemas.AutoFramingOptions.properties
    update:
      zoomFactor:
        description: A value of 1 indicates tight framing. Less than 1 is a zoom-out. Greater than 1 is a zoom-in.

  # BackgroundOptions properties
  - target: $.components.schemas.BackgroundOptions.properties
    update:
      backgroundColor:
        description: RGBA background color. Has an effect only if `showEnvironment` is `false`. Each component has to be in the [0,1] range.
      backgroundImage:
        description: Path to a background image. If set, will be used as the background.
      showEnvironment:
        description: Show the environment map as the background.

  # GroundPlaneOptions properties
  - target: $.components.schemas.GroundPlaneOptions.properties
    update:
      autoGroundScene:
        description: Automatically position the scene on the ground plane. Moves the scene along the vertical axis.
      enable:
        description: Enable/disable the ground plane.
      reflections:
        description: Enable/disable reflections onto the ground plane.
      reflectionsOpacity:
        description: Controls the opacity of the reflections. Useful for compositing purposes.
      reflectionsRoughness:
        description: Controls the roughness of the reflections. Useful for compositing purposes.
      shadows:
        description: Controls whether the ground plane catches shadows or not.
      shadowsOpacity:
        description: Controls the opacity of catched shadows. Only has effect if shadows are enabled.

  # SizeOptions properties
  - target: $.components.schemas.SizeOptions.properties
    update:
      height:
        description: Render height.
      width:
        description: Render width.

  # SceneStatsInfo properties
  - target: $.components.schemas.SceneStatsInfo.properties
    update:
      

  # SceneStatsNode properties
  - target: $.components.schemas.SceneStatsNode.properties
    update:
      assignedMaterialName:
        type: string
        items:
          $ref: '#/components/schemas/SceneStatsNode'
      name:
        type: string
      type:
        type: string
        items:
          $ref: '#/components/schemas/SceneStatsNodeVariant'
      worldSpaceBoundingBox:
        $ref: '#/components/schemas/SceneStatsBoundingBox'

  # SceneStatsNodeVariant properties
  - target: $.components.schemas.SceneStatsNodeVariant.properties
    update:
      currentValue:
        type: string
      name:
        type: string


  # SceneStatsBoundingBox properties
  - target: $.components.schemas.SceneStatsBoundingBox.properties
    update:


  # ========================================
  # SPACES ENDPOINT - Request Objects
  # ========================================

  # ========================================
  # createSpace_v1 - Create Space
  # ========================================

  # Note: Multipart form data properties cannot be updated via overlay 
  # as they use inline schemas in the paths section, not component schemas.

  # ========================================
  # SPACES ENDPOINT - Response Objects
  # ========================================

  # ========================================
  # createSpace_v1 - Create Space Response
  # ========================================

  # Space properties (direct response, not a job response)
  - target: $.components.schemas.Space.properties
    update:
      $schema:
        description: A URL to the JSON schema for this object.
      archiveUrl:
        description: URL to fetch the whole space as an archive (usually a ZIP file).
      files:
        description: List of all files contained in space, ordered by name.
        items:
          $ref: '#/components/schemas/SpaceFile'
      id:
        description: Unique identifier of this space.
      url:
        description: URL to the full description of this space.

  # SpaceFile properties (nested in files)
  - target: $.components.schemas.SpaceFile.properties
    update:
      name:
        type: string
      size:
        type: integer
        format: int64
        minimum: 0
      url:
        type: string

